#include <iostream>
#include<cstring>
#include <windows.h>
using namespace std;

class dnode
{

public:
    char number[50];
    char domnumber[40];
    char name[30];
    dnode* prev, * next;
    dnode(char n[], char r[], char g[])
    {
        strcpy(name, n);
        strcpy(number, r);
        strcpy(domnumber, g);
        next = NULL;
        prev = NULL;
    }
    friend class dlist;
};
class dlist
{
    dnode* head, * temp, * ptr;

    dnode* ptr1, * ptr2, * dup;
public:


    dnode* prevn;

    void insert();
    void sort();
    void deletecontact(char n[20]);
    void deletesamenumber();
    void deletesamename();
    void deletesamedomnumber();
    void searchbyname(char p[20]);
    void searchbynumber(char no[30]);
    void searchbydomnumber(char g[20]);



    void accept();
    void display();
    void update(char ch[15]);
    dlist()
    {
        head = NULL;
        temp = NULL;
        ptr = NULL;
        ptr1 = NULL;
        ptr2 = NULL;
        dup = NULL;
    }
};

void dlist::accept()
{ 
    char number[50];
    char domnumber[40];
    char name[30];
    char ans;
    do
    {
        cout << "Введи имя :";
        cin >> name;
        cout << "Введи номер  :";
        cin >> number;
        while (strlen(number) >= 15)
        {
            cout << "Не правельный номер :";
            cin >> number;
        }
        cout << "Введи домашний :";
        cin >> domnumber;
        temp = new dnode(name, number, domnumber);
        if (head == NULL)
        {
            head = temp;
        }
        else
        {
            ptr = head;
            while (ptr->next != NULL)
            {
                ptr = ptr->next;
            }
            ptr->next = temp;
            temp->prev = ptr;
        }
        cout << "Хочешь продолжить? y/n\n";
        cin >> ans;
    } while (ans == 'y');

}
void dlist::display()
{
    ptr = head;
    while (ptr != NULL)
    {
        cout << "\n\nИмя  ::\t" << ptr->name;
        cout << "\nНомер::\t" << ptr->number;
        cout << "\nДомашний::\t" << ptr->domnumber;
        ptr = ptr->next;
    }
}

void dlist::insert()
{
    accept();
}
void dlist::sort()
{
    dnode* i, * j;
    int temp;
    char n[10];
    for (i = head; i->next != NULL; i = i->next)
    {
        for (j = i->next; j != NULL; j = j->next)
        {
            temp = strcmp(i->name, j->name);
            if (temp > 0)
            {
                strcpy(n, i->name);
                strcpy(i->name, j->name);
                strcpy(j->name, n);
            }
        }
    }

}
void dlist::deletecontact(char s[20])
{
    int c = 0;
    ptr = head;
    while (ptr != NULL)
    {
        if (strcmp(s, ptr->name) == 0)
        {
            c = 1;
            break;
        }
        else
        {
            c = 2;
        }
        ptr = ptr->next;
    }
    if (c == 1 && ptr != head && ptr->next != NULL)
    {
        ptr->prev->next = ptr->next;
        ptr->next->prev = ptr->prev;
        delete(ptr);
        cout << "Твой контакт удален\n\n";
    }
    if (ptr == head)
    {
        head = head->next;
        head->prev = NULL;
        delete(ptr);
        cout << "Твой контакт удален\n\n";
    }
    if (ptr->next == NULL)
    {
        ptr->prev->next = NULL;
        ptr->prev = NULL;
        delete(ptr);
        cout << "Твой контакт удален\n\n";
    }
    if (c == 2)
    {
        cout << "Нет такого имени...";
    }
}
void dlist::deletesamename()
{
    ptr1 = head;
    while (ptr1 != NULL && ptr1->next != NULL)
    {
        ptr2 = ptr1;
        while (ptr2->next != NULL)
        {
            if (strcmp(ptr1->name, ptr2->next->name) == 0)
            {
                dup = ptr2->next;
                ptr2->next = ptr2->next->next;
                delete(dup);
            }
            else
            {
                ptr2 = ptr2->next;
            }
        }
        ptr1 = ptr1->next;
    }
}
void dlist::deletesamedomnumber()
{
    ptr1 = head;
    while (ptr1 != NULL && ptr1->next != NULL)
    {
        ptr2 = ptr1;
        while (ptr2->next != NULL)
        {
            if (strcmp(ptr1->domnumber, ptr2->next->domnumber) == 0)
            {
                dup = ptr2->next;
                ptr2->next = ptr2->next->next;
                delete(dup);
            }
            else
            {
                ptr2 = ptr2->next;
            }
        }
        ptr1 = ptr1->next;
    }
}
void dlist::deletesamenumber()
{
    ptr1 = head;
    while (ptr1 != NULL && ptr1->next != NULL)
    {
        ptr2 = ptr1;
        while (ptr2->next != NULL)
        {
            if (strcmp(ptr1->number, ptr2->number) == 0)
            {
                dup = ptr2->next;
                ptr2->next = ptr2->next->next;
                delete(dup);
            }
            else
            {
                ptr2 = ptr2->next;
            }
        }
        ptr1 = ptr1->next;
    }
}
void dlist::searchbyname(char na[10])
{
    ptr = head;
    while (ptr != NULL)
    {
        if (strcmp(na, ptr->name) == 0)
        {
            cout << "Имя найдено" << endl;
            cout << "Контактня информация:\n" << endl;
            cout << "\n\nИмя  ::\t" << ptr->name;
            cout << "\nНомер::\t" << ptr->number;
            cout << "\nДомашний::\t" << ptr->domnumber;
        }
        ptr = ptr->next;
    }
}
void dlist::searchbynumber(char num[20])
{
    ptr = head;
    while (ptr != NULL)
    {
        if (strcmp(num, ptr->number) == 0)
        {
            cout << "Номер найден\n" << endl;
            cout << "Контактная информация:\n" << endl;
            cout << "\n\nИмя  ::\t" << ptr->name;
            cout << "\nНомер::\t" << ptr->number;
            cout << "\nДомашний::\t" << ptr->domnumber;

        }
        ptr = ptr->next;
    }
}
void dlist::searchbydomnumber(char gm[20])
{
    ptr = head;
    while (ptr != NULL)
    {
        if (strcmp(gm, ptr->domnumber) == 0)
        {
            cout << "Домашний найден\n" << endl;
            cout << "Контактная информация:\n" << endl;
            cout << "\n\nИмя  ::\t" << ptr->name;
            cout << "\nНомер::\t+" << ptr->number;
            cout << "\nДомашний::\t" << ptr->domnumber;
        }
        ptr = ptr->next;
    }
}
void dlist::update(char n[20])

{
    char ans;
    int c;
    ptr = head;
    while (ptr != NULL)
    {
        if (strcmp(n, ptr->name) == 0)
        {

            do
            {
                cout << "\nХочеш изменить?\n1.Имя\n2.Номер\n3.Домашний\n";
                cin >> c;
                switch (c)
                {
                case 1:
                    cout << "Введите новое Имя";
                    cin >> ptr->name;
                    break;
                case 2:
                    cout << "Введи новый номер - Номер?";
                    cin >> ptr->number;
                    while (strlen(ptr->number) != 10)
                    {
                        cout << "Введи правильный номер  :";
                        cin >> ptr->number;
                    }
                    break;
                case 3:
                    cout << "Введи домашний";
                    cin >> ptr->domnumber;
                    break;
                }
                cout << "Хочеш продолжить?\n";
                cin >> ans;
            } while (ans == 'y');
        }
        ptr = ptr->next;
    }
}
int main()
{
    system("cls");
    int i1 = GetConsoleCP();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int i;
    char n[20];
    char nam[20];
    char name[15];
    char number[15];
    char domnumber[20];
    dlist d1;
    char ans;
    int ch, a;

    cout << "**************                                Телефонная книга                          ********************";
    cout << "\n\nКак тебя зовут?\n";
    cin.getline(name, 20);
    cout << "\n\n!!!!!!!!!!!!!!!!!!!!!!!   Привет " << name << "   !!!!!!!!!!!!!!!!!!!!!";
    cout << "\n\n\nСделаем телефонную книгу \n";
    d1.accept();
    d1.sort();
    do
    {
        cout << "\n\n\n\n1) Показать книгу\n2) Новый контакт\n3) Обновить введенный контакт\n4) Удалить контакт\n5) Удалить одинаковое имя\n6) Удалить одинаковые номера\n7) Поиск\n";
        cin >> ch;
        switch (ch)
        {
        case 2:
            d1.insert();
            d1.sort();
            break;

        case 1:
            // d1.sort();
            d1.display();
            break;
        case 3:

            cout << "\n\nВведи имя человека, детали о котором ты хочеш обновить...\n";
            cin >> n;
            d1.update(n);
            d1.sort();
            break;
        case 4:
            cout << "\nВведи имя, которое ты хочеш удалить\n";
            cin >> name;
            d1.deletecontact(name);
            break;
        case 5:
            d1.deletesamename();
            d1.display();
            break;
        case 6:
            d1.deletesamenumber();
            d1.display();
            break;
        case 7:
            do
            {
                cout << "1.Искать по имени\n2.Искать по номеру\n3.Искать по домашнему";
                cin >> a;
                switch (a)
                {
                case 1:
                    cout << "Введи искомое имя\n";
                    cin >> name;
                    d1.searchbyname(name);
                    break;
                case 2:
                    cout << "Введи искомый номер имя\n";
                    cin >> number;
                    d1.searchbynumber(number);
                    break;
                case 3:
                    cout << "Введи домашний \n";
                    cin >> domnumber;
                    d1.searchbydomnumber(domnumber);
                    break;
                default:cout << "\nВвода не существует.....\n\n";
                }
                cout << "Хочеш продолжить поиск? y/n\n\n";
                cin >> ans;
            } while (ans == 'y');

            break;
        case 8:d1.deletesamedomnumber();
            d1.display();
            break;
        default:cout << "\nВвода не существует..\n";
        }
        cout << "\n\nХочеш продолжить? y/n\n";
        cin >> ans;
    } while (ans == 'y');
    SetConsoleCP(i1);
    SetConsoleOutputCP(i1);
}
